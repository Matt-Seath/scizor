version: '3.8'

services:
  # Main application (production)
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile.prod
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - ASYNC_DATABASE_URL=${ASYNC_DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - SECRET_KEY=${SECRET_KEY}
      - IBKR_HOST=${IBKR_HOST}
      - IBKR_PORT=${IBKR_PORT}
      - IBKR_CLIENT_ID=${IBKR_CLIENT_ID}
      - ENABLE_LIVE_DATA=true
      - DEBUG=false
    volumes:
      - ../logs:/app/logs
      - ../data:/app/data
    depends_on:
      - db
      - redis
    restart: always
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Celery worker (production)
  celery-worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile.prod
    command: celery -A app.tasks.celery_app worker --loglevel=warning --concurrency=4
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - ASYNC_DATABASE_URL=${ASYNC_DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - IBKR_HOST=${IBKR_HOST}
      - IBKR_PORT=${IBKR_PORT}
    volumes:
      - ../logs:/app/logs
      - ../data:/app/data
    depends_on:
      - db
      - redis
    restart: always
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Celery beat scheduler (production)
  celery-beat:
    build:
      context: ..
      dockerfile: docker/Dockerfile.prod
    command: celery -A app.tasks.celery_app beat --loglevel=warning
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    volumes:
      - ../logs:/app/logs
    depends_on:
      - redis
    restart: always
    networks:
      - trading-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl/certs
    depends_on:
      - app
    restart: always
    networks:
      - trading-network

  # PostgreSQL database (production)
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
    restart: always
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Redis (production)
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    restart: always
    networks:
      - trading-network

  # Prometheus (production)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: always
    networks:
      - trading-network

  # Grafana (production)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    restart: always
    networks:
      - trading-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  trading-network:
    driver: bridge